Tests for the '7-base_geometry' module
----------------------------------------

Import the class:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now test it:

    >>> a = BaseGeometry()
    
    >>> a.integer_validator("num", 7)

    >>> a.integer_validator("length", 10)

    >>> a.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> a.integer_validator("name", "Area")
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> a.integer_validator("set", 0)
    Traceback (most recent call last):
    ValueError: set must be greater than 0
    
    >>> a.integer_validator("distance", -13)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

    >>> a.integer_validator("sum", 4.9)
    Traceback (most recent call last):
    TypeError: sum must be an integer

    >>> a.integer_validator("perimeter")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> a.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> a.integer_validator("NaN", float('nan'))
    Traceback (most recent call last):
    TypeError: NaN must be an integer

    >>> a.integer_validator("Large", 340000000000000000000000000000000000000000000)

    >>> a.integer_validator("sides", (14,))
    Traceback (most recent call last):
    TypeError: sides must be an integer

    >>> a.integer_validator("sum", [5])
    Traceback (most recent call last):
    TypeError: sum must be an integer

    >>> a.integer_validator("sides", False)
    Traceback (most recent call last):
    TypeError: sides must be an integer

    >>> a.integer_validator("area", {11, 14})
    Traceback (most recent call last):
    TypeError: area must be an integer

    >>> a.integer_validator("sum", None)
    Traceback (most recent call last):
    TypeError: sum must be an integer
